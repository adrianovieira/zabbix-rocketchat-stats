#!/usr/bin/python
# coding: utf-8
# 24 Jan 2018 - Tristan Le Toullec
#
# This file is part of zabbix-rocketchat-stats
# (https://github.com/tristanlt/zabbix-rocketchat-stats)
#
#    zabbix-rocketchat-stats is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    zabbix-rocketchat-stats is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with zabbix-rocketchat-stats.  If not, see <http://www.gnu.org/licenses/>.
#

import requests
import logging
import json
import sys

#logging.basicConfig(level=logging.DEBUG)

### Define RocketChat user !
url = "https://rocket_chat.fqdn/api"
user = "zabbix_stats_user"
password = "password" 


def login(api_url, username, password):
    """
    Tried to login user on login api
    
    Output if auth ok: Dict with authToken and userId keys
    Output if auth failed: None
    """
    # Login Endpoint
    endpoint = "%s/v1/login" % (api_url)
    
    data = { "username": username,
             "password": password }
 
    try:
        r = requests.post(endpoint, data=data)
    except:
        logging.critical("Failed to connect API endpoint (login step)")
        return None

    try:
        r.json()
    except:
        logging.critical("Wrong JSON receive from API, check endpoint (login step)")
        return None

    if not "status" in r.json().keys():
        logging.critical("Wrong data receive from API (login step)")
        logging.debug(r.json())
        return None
    
    if r.json()['status'] == "success":
        logging.info("Login Success")
        return r.json()['data']
    else:
        logging.critical("Login failed, check credentials")
        return None

def statistics(api_url, username, password, statsname):
    """
    print JSON with statistics from API/v1 
    """
    statsname
    endpoint = "%s/v1/statistics" % (api_url)
    # Login
    credentials = login(api_url, username, password)       
    if not credentials:
        return None
    
    # Prepare headers
    headers = { "X-Auth-Token": credentials['authToken'],
                "X-User-Id": credentials['userId'] }
    try:
        r = requests.get(endpoint, headers=headers)
    except:
        logging.critical("Failed to connect API")
        return None
    
    try:
        r.json()
    except:
        logging.critical("Wrong JSON receive from API /v1/statistics, check endpoint (statistics step)")
        return None
    
    if statsname in r.json()['statistics'].keys():
        print(r.json()['statistics'][statsname])    

statistics(url, user, password, sys.argv[1])
