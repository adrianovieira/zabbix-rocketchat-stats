#!/usr/bin/env python3
# coding: utf-8
# 24 Jan 2018 - Tristan Le Toullec
#
# This file is part of zabbix-rocketchat-stats
# (https://github.com/tristanlt/zabbix-rocketchat-stats)
#
#    zabbix-rocketchat-stats is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    zabbix-rocketchat-stats is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with zabbix-rocketchat-stats.  If not, see <http://www.gnu.org/licenses/>.
#

import requests
import logging
import json
import sys
import pprint
import os
import pickle
import time
import stat

# logging.basicConfig(level=logging.DEBUG)

### Define RocketChat login credentials !
url = "https://rocket_chat.fqdn/api"
user = "zabbix_stats_user"
password = "password"
# maximum accepted age of the cache file
max_file_age = 90


def login(api_url, username, password):
    """
    Tried to login user on login api
    
    Output if auth ok: Dict with authToken and userId keys
    Output if auth failed: None
    """
    # Login Endpoint
    endpoint = "%s/v1/login" % (api_url)

    data = {"username": username,
            "password": password}

    try:
        r = requests.post(endpoint, data=data)
    except:
        logging.critical("Failed to connect API endpoint (login step)")
        return None

    try:
        r.json()
    except:
        logging.critical("Wrong JSON receive from API, check endpoint (login step)")
        return None

    if not "status" in r.json().keys():
        logging.critical("Wrong data receive from API (login step)")
        logging.debug(r.json())
        return None

    if r.json()['status'] == "success":
        logging.info("Login Success")
        return r.json()['data']
    else:
        logging.critical("Login failed, check credentials")
        return None


def file_age_in_seconds(pathname):
    return time.time() - os.stat(pathname)[stat.ST_MTIME]


def statistics(api_url, username, password, statsname):
    """
    print JSON with statistics from API/v1 
    """
    statsname
    endpoint = "%s/v1/statistics" % (api_url)

    EXECUTABLE = os.path.basename(__file__)
    statusfile = "/tmp/%s_%s.pickle" % (EXECUTABLE, os.getuid())

    data = {}
    reload_data = True
    if os.path.exists(statusfile):
        try:
            data = pickle.load(open(statusfile, "rb"))
        except:
            logging.critical("ERROR: unable to read statusfile %s" % statusfile)
        file_age = file_age_in_seconds(statusfile)
        if file_age < max_file_age:
            reload_data = False
        else:
            reload_data = True
            os.remove(statusfile)

    if reload_data:
        # Login

        if "credentials" in data:
            # use cached auth tolen, because login to active directory/ldap take too much time
            credentials = data["credentials"]
        else:
            credentials = login(api_url, username, password)

        if not credentials:
            logging.critical("login failed")
            return None
        # Prepare headers
        headers = {"X-Auth-Token": credentials['authToken'],
                   "X-User-Id": credentials['userId']}

        try:
            r = requests.get(endpoint, headers=headers)
        except Exception as e:
            logging.critical("Failed to connect API: %s" % e)
            return None

        try:
            data = r.json()
        except Exception as e:
            logging.critical("Wrong JSON receive from API /v1/statistics, check endpoint (statistics step): %s" % e)
            return None

        try:
            data["credentials"] = credentials
            pickle.dump(data, open(statusfile, "wb"))
        except Exception as e:
            logging.critical("but storing status to %s failed : %s" % (statusfile, e))

    if statsname == "all":
        pprint.pprint(data['statistics'])
    elif statsname in data['statistics'].keys():
        print(data['statistics'][statsname])


if len(sys.argv) <= 1:
    print("rocketchat-stats all|arg")
    sys.exit(1)

statistics(url, user, password, sys.argv[1])

# vim: ai et ts=2 shiftwidth=2 expandtab
